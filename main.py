import json
import os
from telegram import send_message, send_photo
from logger import save_message, start_thread, get_chat_history
from analyst import run_analyst
from yandex_cloud_ml_sdk import YCloudML

WEBHOOK_SECRET = os.getenv("WEBHOOK_SECRET")

_seen_update_ids: set[int] = set()
_threads: dict[str, str] = {}

# --- YandexGPT –¥–ª—è –¥–∏–∞–ª–æ–≥–æ–≤ –∏ –º–∞—Ä—à—Ä—É—Ç–∏–∑–∞—Ü–∏–∏ ---
FOLDER_ID = os.getenv("YC_FOLDER_ID")
API_KEY = os.getenv("YC_API_KEY")

yc_sdk = YCloudML(folder_id=FOLDER_ID, auth=API_KEY)
dialog_llm = yc_sdk.models.completions("yandexgpt")


def _log(label, obj):
    try:
        print(label, json.dumps(obj, ensure_ascii=False)[:3000])
    except Exception:
        print(label, str(obj)[:3000])


def decide_action(user_message: str) -> str:
    """
    GPT —Ä–µ—à–∞–µ—Ç: –Ω—É–∂–Ω–æ SQL (Analyst) –∏–ª–∏ –æ–±—ã—á–Ω—ã–π –æ—Ç–≤–µ—Ç (Chat).
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç "SQL" –∏–ª–∏ "CHAT".
    """
    system_prompt = """
    –¢—ã ‚Äî HR-–∞—Å—Å–∏—Å—Ç–µ–Ω—Ç. –¢–≤–æ—è –∑–∞–¥–∞—á–∞: –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å, –Ω—É–∂–µ–Ω –ª–∏ SQL-–∑–∞–ø—Ä–æ—Å –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö hr_data,
    –∏–ª–∏ –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –æ–±—ã—á–Ω–æ–≥–æ –æ—Ç–≤–µ—Ç–∞.

    hr_data —Å–æ–¥–µ—Ä–∂–∏—Ç:
    - report_date (DATE)
    - service (TEXT)
    - hirecount (INT)
    - firecount (INT)

    –ï—Å–ª–∏ –≤–æ–ø—Ä–æ—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø—Ä–æ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É, –≥—Ä–∞—Ñ–∏–∫–∏, –Ω–∞–π–º—ã, —É–≤–æ–ª—å–Ω–µ–Ω–∏—è ‚Üí –æ—Ç–≤–µ—Ç "SQL".
    –ï—Å–ª–∏ —ç—Ç–æ –æ–±—â–∏–π –≤–æ–ø—Ä–æ—Å –∏–ª–∏ —Ä–∞–∑–≥–æ–≤–æ—Ä ‚Üí –æ—Ç–≤–µ—Ç "CHAT".

    –í–ê–ñ–ù–û: –û—Ç–≤–µ—Ç—å —Ç–æ–ª—å–∫–æ –æ–¥–Ω–∏–º —Å–ª–æ–≤–æ–º: SQL –∏–ª–∏ CHAT.
    """

    model = dialog_llm.configure(temperature=0.0, max_tokens=5)
    result = model.run(f"{system_prompt}\n\n–í–æ–ø—Ä–æ—Å: {user_message}")
    decision = result.alternatives[0].text.strip().upper()
    return "SQL" if "SQL" in decision else "CHAT"


def chat_with_gpt(thread_id: str, user_message: str) -> str:
    """
    –î–∏–∞–ª–æ–≥–æ–≤—ã–π –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç (YandexGPT), –∏—Å–ø–æ–ª—å–∑—É–µ—Ç –∏—Å—Ç–æ—Ä–∏—é.
    """
    history = get_chat_history(thread_id, limit=6)

    hist_text = "\n".join(
        [f"{row['role']}({row['agent_name']}): {row['message']}" for row in history]
    )[:2000]

    system_prompt = f"""
    –¢—ã HR-–∞—Å—Å–∏—Å—Ç–µ–Ω—Ç. –û—Ç–≤–µ—á–∞–π –¥—Ä—É–∂–µ–ª—é–±–Ω–æ, –Ω–æ –ø–æ –¥–µ–ª—É.
    –ü–æ–º–æ–≥–∞–π –≤ –≤–æ–ø—Ä–æ—Å–∞—Ö HR-–∞–Ω–∞–ª–∏—Ç–∏–∫–∏ –∏ –¥–∞–Ω–Ω—ã—Ö.
    –ò—Å—Ç–æ—Ä–∏—è –¥–∏–∞–ª–æ–≥–∞:
    {hist_text}

    –ù–æ–≤—ã–π –≤–æ–ø—Ä–æ—Å: {user_message}
    """

    model = dialog_llm.configure(temperature=0.5, max_tokens=300)
    result = model.run(system_prompt)
    return result.alternatives[0].text.strip()


def handler(event, context):
    # ---------- Healthcheck ----------
    if (event or {}).get("httpMethod") == "GET":
        return {"statusCode": 200, "headers": {"Content-Type": "text/plain"}, "body": "ok"}

    # ---------- –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–µ–∫—Ä–µ—Ç–∞ ----------
    headers = (event or {}).get("headers") or {}
    headers_l = {(k or "").lower(): v for k, v in headers.items()}
    got_secret = headers_l.get("x-telegram-bot-api-secret-token")
    if got_secret != WEBHOOK_SECRET:
        _log("forbidden: bad secret", {"got": got_secret, "need": WEBHOOK_SECRET})
        return {"statusCode": 200, "body": "forbidden"}  # –≤—Å–µ–≥–¥–∞ 200

    # ---------- –†–∞–∑–±–æ—Ä –∞–ø–¥–µ–π—Ç–∞ ----------
    try:
        update = json.loads((event or {}).get("body") or "{}")
        _log("incoming update", update)
    except Exception as e:
        _log("bad json", {"error": repr(e), "body": (event or {}).get("body")})
        return {"statusCode": 200, "body": "bad json"}  # –≤—Å–µ–≥–¥–∞ 200

    update_id = update.get("update_id")
    if update_id is not None:
        if update_id in _seen_update_ids:
            return {"statusCode": 200, "body": "dup"}
        _seen_update_ids.add(update_id)

    message = update.get("message") or update.get("edited_message") or {}
    chat_id = str((message.get("chat") or {}).get("id"))
    text = (message.get("text") or "").strip()

    if not chat_id or not text:
        _log("no chat_id or empty text", update)
        return {"statusCode": 200, "body": "no chat_id"}

    # ---------- –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ç—Ä–µ–¥–∞–º–∏ ----------
    if chat_id not in _threads:
        _threads[chat_id] = start_thread(chat_id)  # –∏—Å–ø–æ–ª—å–∑—É–µ–º chat_id –∫–∞–∫ user_id
    thread_id = _threads[chat_id]

    # ---------- –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ----------
    save_message(thread_id, chat_id, "user", text, "user")

    # ---------- –ë–∏–∑–Ω–µ—Å-–ª–æ–≥–∏–∫–∞ ----------
    try:
        if text == "/start":
            reply = "–ü—Ä–∏–≤–µ—Ç! –Ø —Ç–≤–æ–π HR-–∞—Å—Å–∏—Å—Ç–µ–Ω—Ç üëã –Ø –º–æ–≥—É —Ä–∞–±–æ—Ç–∞—Ç—å —Å –ë–î, —Å—Ç—Ä–æ–∏—Ç—å –≥—Ä–∞—Ñ–∏–∫–∏ –∏ –ø–æ–º–æ–≥–∞—Ç—å –≤ –∞–Ω–∞–ª–∏—Ç–∏–∫–µ."
            save_message(thread_id, chat_id, "assistant", reply, "main")
            send_message(chat_id, reply)

        elif text.startswith("/db"):
            result = run_analyst(thread_id, text, chat_id)

            if result["type"] == "clarification":
                save_message(thread_id, chat_id, "assistant", result["text"], "analyst")
                send_message(chat_id, result["text"])
            elif result["type"] == "result":
                save_message(thread_id, chat_id, "assistant", result["text"], "analyst")
                send_message(chat_id, result["text"])
                if result["image"]:
                    send_photo(chat_id, result["image"], "–í–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—è üìà")
            else:
                send_message(chat_id, result["text"])

        else:
            # --- GPT —Ä–µ—à–∞–µ—Ç, –∑–≤–∞—Ç—å –ª–∏ –∞–Ω–∞–ª–∏—Ç–∏–∫–∞ ---
            action = decide_action(text)

            if action == "SQL":
                send_message(chat_id, "–ì–µ–Ω–µ—Ä–∏—Ä—É—é –∞–Ω–∞–ª–∏—Ç–∏–∫—É... üìä")
                result = run_analyst(thread_id, text, chat_id)

                if result["type"] == "clarification":
                    save_message(thread_id, chat_id, "assistant", result["text"], "analyst")
                    send_message(chat_id, result["text"])
                elif result["type"] == "result":
                    save_message(thread_id, chat_id, "assistant", result["text"], "analyst")
                    send_message(chat_id, result["text"])
                    if result["image"]:
                        send_photo(chat_id, result["image"], "–í–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—è üìà")
                else:
                    send_message(chat_id, result["text"])

            else:
                reply = chat_with_gpt(thread_id, text)
                save_message(thread_id, chat_id, "assistant", reply, "main")
                send_message(chat_id, reply)

        return {"statusCode": 200, "body": "ok"}

    except Exception as e:
        _log("unhandled error", repr(e))
        send_message(chat_id, "‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –≤–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑.")
        return {"statusCode": 200, "body": "error"}  # –≤—Å–µ–≥–¥–∞ 200
